"""initial tables

Revision ID: d28028b1feae
Revises: 
Create Date: 2025-04-06 01:49:26.771068

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from pgvector.sqlalchemy import Vector
import geoalchemy2


# revision identifiers, used by Alembic.
revision: str = 'd28028b1feae'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('face_identities',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('label', sa.String(), nullable=True),
    sa.Column('reference_embedding', Vector(dim=512), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('images',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('filename', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('date_taken', sa.DateTime(), nullable=True),
    sa.Column('camera_make', sa.String(), nullable=True),
    sa.Column('camera_model', sa.String(), nullable=True),
    sa.Column('focal_length', sa.Float(), nullable=True),
    sa.Column('exposure_time', sa.String(), nullable=True),
    sa.Column('f_number', sa.Float(), nullable=True),
    sa.Column('iso', sa.Integer(), nullable=True),
    sa.Column('dimensions', sa.String(), nullable=True),
    sa.Column('format', sa.String(), nullable=True),
    sa.Column('file_size', sa.Float(), nullable=True),
    sa.Column('location', geoalchemy2.types.Geography(geometry_type='POINT', srid=4326, from_text='ST_GeogFromText', name='geography'), nullable=True),
    sa.Column('embedding', Vector(dim=512), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('filename')
    )
    
    # Create index with IF NOT EXISTS
    conn = op.get_bind()
    conn.execute(sa.text(
        'CREATE INDEX IF NOT EXISTS idx_images_location ON images USING gist (location);'
    ))
    
    op.create_table('face_detections',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('image_id', sa.Integer(), nullable=True),
    sa.Column('embedding', Vector(dim=512), nullable=True),
    sa.Column('bounding_box', sa.JSON(), nullable=True),
    sa.Column('landmarks', sa.JSON(), nullable=True),
    sa.Column('similarity_score', sa.Float(), nullable=True),
    sa.Column('identity_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['identity_id'], ['face_identities.id'], ),
    sa.ForeignKeyConstraint(['image_id'], ['images.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('object_detections',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('image_id', sa.Integer(), nullable=True),
    sa.Column('label', sa.String(), nullable=True),
    sa.Column('confidence', sa.Float(), nullable=True),
    sa.Column('bounding_box', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['image_id'], ['images.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('scene_classifications',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('image_id', sa.Integer(), nullable=True),
    sa.Column('scene_type', sa.String(), nullable=True),
    sa.Column('confidence', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['image_id'], ['images.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('text_detections',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('image_id', sa.Integer(), nullable=True),
    sa.Column('text', sa.String(), nullable=True),
    sa.Column('confidence', sa.Float(), nullable=True),
    sa.Column('bounding_box', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['image_id'], ['images.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('text_detections')
    op.drop_table('scene_classifications')
    op.drop_table('object_detections')
    op.drop_table('face_detections')
    op.drop_index('idx_images_location', table_name='images', postgresql_using='gist')
    op.drop_table('images')
    op.drop_table('face_identities')
    # ### end Alembic commands ###
